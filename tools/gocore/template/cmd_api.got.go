// Code generated by hero.
// source: /Users/SM0286/code/core/gocore/tools/gocore/template/cmd_api.got
// DO NOT EDIT!
package template

import (
	"bytes"

	"github.com/shiyanhui/hero"
)

func FromCmdApi(projectName string, buffer *bytes.Buffer) {
	buffer.WriteString(`
package cmd

import (
	"log"
	"os"
	"os/signal"
	"syscall"

	"`)
	hero.EscapeHTML(projectName, buffer)
	buffer.WriteString(`/app/routes"
	"`)
	hero.EscapeHTML(projectName, buffer)
	buffer.WriteString(`/common"

	"github.com/sunmi-OS/gocore/v2/aliyunlog"
	"github.com/sunmi-OS/gocore/v2/gorm"
	"github.com/sunmi-OS/gocore/v2/viper"
	"github.com/sunmi-OS/gocore/v2/web"
	"github.com/urfave/cli"
)

var Api = cli.Command{
	Name:    "api",
	Aliases: []string{"a"},
	Usage:   "api start",
	Subcommands: []cli.Command{
		{
			Name:   "start",
			Usage:  "开启运行api服务",
			Action: RunApi,
		},
	},
}

func RunApi(c *cli.Context) error {
	// 如何确定哪些需要加载
	initConf()
	common.Init()
	initDB()
	e := web.InitEcho(&web.Config{
		Port: viper.C.GetString("network.ApiServicePort"),
	})
	routes.Router(e.Echo)

	e.Start()
	// 监听信号
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)
	for {
		si := <-ch
		switch si {
		case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:
			log.Fatalf("get a signal %s, stop the process", si.String())
			// Close相关服务
			e.Echo.Close()
			gorm.Close()
			aliyunlog.Close()
			return nil
		case syscall.SIGHUP:
		default:
			return nil
		}
	}
}`)

}
