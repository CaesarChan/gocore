<%: func FromCmdCronJob(name, cronjobs string, buffer *bytes.Buffer) %>
package cmd

import (
	"log"
	"<%= name %>/app/cronjob"
	"<%= name %>/common"
	"os"
	"os/signal"
	"syscall"

	"github.com/robfig/cron"
	"github.com/sunmi-OS/gocore/v2/utils/aliyunlog"
	"github.com/sunmi-OS/gocore/v2/db/gorm"
	"github.com/urfave/cli"
)

// Cronjob cmd 定时任务相关
var Cronjob = cli.Command{
	Name:    "cron",
	Aliases: []string{"c"},
	Usage:   "run",
	Subcommands: []cli.Command{
		{
			Name:   "start",
			Usage:  "开启运行api服务",
			Action: runCron,
		},
	},
}

// runCron 运行定时任务
func runCron(c *cli.Context) error {

	// 初始化必要内容
	initConf()
	initDB()
	common.Init()
	cronObj := cron.New()

    <%= cronjobs %>

	// 同步阻塞运行
	cronObj.Start()

	// 监听信号
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)
	for {
		si := <-ch
		switch si {
		case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:
			log.Fatalf("get a signal %s, stop the process", si.String())
			// Close相关服务
			cronObj.Stop()
			gorm.Close()
			aliyunlog.Close()
			return nil
		case syscall.SIGHUP:
		default:
			return nil
		}
	}
}